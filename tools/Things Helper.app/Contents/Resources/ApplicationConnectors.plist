<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>.unknown</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            set docname to ""
            set docurl to ""

            tell application "System Events"

                set pr to first application process whose bundle identifier is "CURRENTBUNDLEID"

                tell pr
                    try
                        set isScriptable to has scripting terminology
                    on error
                        set isScriptable to false
                    end try
                end tell
            end tell 
            
            if isScriptable then
                
                tell application id "CURRENTBUNDLEID"
                                    
                    try

                        set doc to document 1 of window 1
                        set docname to name of doc
                        set docpath to path of doc
                        
                    on error
                    
                        set docname to ""
                        set docpath to ""
                        set docurl to ""

                    end try
                    
                end tell

                try
                
                    set posixFilePath to POSIX path of docpath
                    set docurl to "📄 " & docname & "\n" & "[filepath=" & posixFilePath & "]" & docname & "[/filepath]"
                    
                on error
                    set docname to ""
                    set docurl to ""
                end try

            end if

            {"", docurl}

        ]]></string>
	</dict>
	<key>com.culturedcode.things</key>
	<dict/>
	<key>com.culturedcode.ThingsMac</key>
	<dict/>
	<key>com.apple.safari</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            tell application id "com.apple.Safari"
                tell front window
                    set _tab to current tab
                    set _title to name of _tab
                    set _url to URL of _tab
                end tell
                set _notes to _title & "\n" & _url
                {_title, _notes}
            end tell

        ]]></string>
	</dict>
	<key>com.apple.safaritechnologypreview</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            tell application id "com.apple.SafariTechnologyPreview"
                tell front window
                    set _tab to current tab
                    set _title to name of _tab
                    set _url to URL of _tab
                end tell
                set _notes to _title & "\n" & _url
                {_title, _notes}
            end tell

        ]]></string>
	</dict>
	<key>org.mozilla.firefox</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            tell application "Firefox"
                set theUrl to «class curl» of window 1
                set theTitle to «class pTit» of window 1
                if theTitle is "" then
                    set theTitle to theUrl
                end if
                {theTitle, theUrl}
            end tell
        ]]></string>
		<key>AppleScriptUsingBundleID</key>
		<string><![CDATA[
            set resultNote to ""
            tell application id "org.mozilla.firefox"
                set theUrl to «class curl» of window 1
                set theTitle to «class pTit» of window 1
                if theTitle is "" then
                    set theTitle to theUrl
                end if
                {theTitle, theUrl}
            end tell
        ]]></string>
	</dict>
	<key>com.google.chrome</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            set resultNote to ""
            tell application id "com.google.chrome"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
	</dict>
    <key>com.bookry.wavebox</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.bookry.wavebox"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if name is "" then
                            set theNotes to theUrl
                        else
                            set theNotes to name & "\n" & theUrl
                        end if
                    end tell
                end tell
                { theTitle, theNotes }
            end tell
        ]]></string>
    </dict>
    <key>com.kagi.kagimacos</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.kagi.kagimacOS"
                tell window 1
                    tell current tab
                        set theUrl to URL
                        set theTitle to name
                        if name is "" then
                            set theNotes to theUrl
                        else
                            set theNotes to name & "\n" & theUrl
                        end if
                    end tell
                    {theTitle, theNotes}
                end tell
            end tell
        ]]></string>
    </dict>
    <key>com.microsoft.edgemac</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.microsoft.edgemac"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>com.microsoft.edgemac.beta</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.microsoft.edgemac.Beta"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>com.microsoft.edgemac.canary</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.microsoft.edgemac.Canary"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>company.thebrowser.browser</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "company.thebrowser.Browser"
                tell window 1
                    set theUrl to URL of active tab
                    set theTitle to title of active tab
                    if theTitle is "" then
                        set theTitle to theUrl
                    end if
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>com.brave.browser</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.brave.Browser"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>com.google.chrome.canary</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.google.chrome.canary"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>com.google.chrome.beta</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.google.chrome.beta"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
    <key>com.google.chrome.dev</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.google.chrome.dev"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
	<key>com.operasoftware.opera</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            tell application id "com.operasoftware.opera"
                set current_tab to active tab of window 1
                set current_title to title of current_tab
                set current_url to URL of current_tab
            end tell
            {current_title, current_url}
        ]]></string>
	</dict>
    <key>com.vivaldi.vivaldi</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            set resultNote to ""
            tell application id "com.vivaldi.Vivaldi"
                tell window 1
                    set i to active tab index
                    tell item i of tabs
                        set theUrl to URL
                        set theTitle to title
                        if theTitle is "" then
                            set theTitle to theUrl
                        end if
                    end tell
                end tell
                { theTitle, theUrl }
            end tell
        ]]></string>
    </dict>
	<key>com.omnigroup.omniweb5</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            tell application "OmniWeb"
                set current_url to address of active tab of browser 1
            end tell

            {"", current_url}

        ]]></string>
	</dict>
	<key>org.mozilla.camino</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            tell application "Camino"
                set t to current tab of window 1
                set current_title to title of t
                set current_url to URL of t
            end tell

            {current_title, current_url}

        ]]></string>
	</dict>
	<key>com.apple.mail</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            tell application "Mail"

                set mailNotesList to {} as list
                set oldestMailSubject to ""
                set minMailDate to missing value
                set msgs to selection

                try

                    repeat with msg in msgs

                        set mailSubject to subject of msg as rich text

                        set mailDate to date received of msg
                        if mailDate is missing value then
                            set mailDate to date sent of msg
                        end if

                        if mailDate is not missing value then
                            if minMailDate is missing value then
                                set minMailDate to mailDate
                                set oldestMailSubject to mailSubject
                            else
                                if minMailDate is greater than mailDate then
                                    set minMailDate to mailDate
                                    set oldestMailSubject to mailSubject
                                end if
                            end if
                        end if


                        set msgId to message id of msg as rich text

                        set AppleScript's text item delimiters to {"%"}
                        if (count of text items of msgId) > 1 then
                            set msgIdComponents to text items of msgId
                            set AppleScript's text item delimiters to {"%25"}
                            set validMsgId to msgIdComponents as rich text
                        else
                            set validMsgId to msgId
                        end if
                        set AppleScript's text item delimiters to {""}

                        set mailContactAddress to sender of msg as rich text

                        set AppleScript's text item delimiters to {" <"}
                        if (count of text items of mailContactAddress) > 1 then
                            set mailContactDisplayAddress to item 1 of text items of mailContactAddress
                            set AppleScript's text item delimiters to space
                        else
                            set mailContactDisplayAddress to mailContactAddress
                        end if

                        set mailTitle to mailSubject
                        set mailUrl to "message:%3C" & validMsgId & "%3E"
                        set mailNotes to "✉️ " & mailContactDisplayAddress & ": \"" & mailSubject & "\"" & "\n" & mailUrl

                        set mailNotesList to mailNotesList & mailNotes

                    end repeat

                    if (count of mailNotesList) > 1 then
                        set mailTitleString to oldestMailSubject
                        set AppleScript's text item delimiters to {"  " & "\n" & "\n"}
                        set mailNotesString to mailNotesList as string
                        set AppleScript's text item delimiters to {""}
                    else
                        set mailTitleString to mailTitle
                        set mailNotesString to mailNotes
                    end if

                    {mailTitleString, mailNotesString}

                on error

                    try
                        return {"", ""}
                    end try

                end try

            end tell

        ]]></string>
	</dict>
    <key>it.bloop.airmail2</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "it.bloop.airmail2"
        
                try
                
                    set msgURL to selectedMessageUrl
                    set msg to selected message
                    set msgSender to sender of msg
                    set msgSubject to subject of msg
                    
                    set mailTitleString to msgSubject
                    set mailNotesString to "✉️ " & msgSender & ": \"" & msgSubject & "\"" & "\n" & msgURL
                    
                    {mailTitleString, mailNotesString}
                
                on error
                    {"", ""}
                end try
            
            end tell
        ]]></string>
    </dict>
    <key>com.freron.mailmate</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.freron.MailMate"

                set msgs to messages

                set mailNotesList to {} as list

                repeat with msg in msgs

                    try

                        set msgURL to (message url of msg as text)
                        set msgSubject to (name of msg as text)

                        set mailTitleString to msgSubject
                        set mailNotesString to "✉️ " & msgSubject & return & msgURL

                        set mailNotesList to mailNotesList & mailNotesString

                    on error
                        {"", ""}
                    end try

                end repeat


                if (count of mailNotesList) > 1 then
                    set mailTitleString to ""
                    set AppleScript's text item delimiters to {"  " & return & return}
                    set mailNotesString to mailNotesList as string
                    set AppleScript's text item delimiters to {""}
                end if

                {mailTitleString, mailNotesString}

            end tell
        ]]></string>
    </dict>
	<key>com.postbox-inc.postbox</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
                tell application "Postbox"
        
                    set mailNotesList to {} as list

                    set msgs to selection

                    try
                        repeat with msg in msgs
                    
                            set mailSubject to subject of msg as text
                            set mailPersistentUrl to url of msg as text
                            set mailContactAddress to sender of msg as text
                            
                            set AppleScript's text item delimiters to {" <"}
                            if (count of text items of mailContactAddress) > 1 then

                                set mailContactDisplayAddress to item 1 of text items of mailContactAddress
                                set AppleScript's text item delimiters to space
                                
                            else
                                set mailContactDisplayAddress to mailContactAddress
                            end if

                            set mailTitle to mailSubject
                            set mailNotes to "✉️ " & mailContactDisplayAddress & ": \"" & mailSubject & "\"" & "\n" & mailPersistentUrl

                            set mailNotesList to mailNotesList & mailNotes

                        end repeat

                        if count of mailNotesList > 1 then
                            set mailTitleString to ""
                            set AppleScript's text item delimiters to {"  " & "\n" & "\n"}
                            set mailNotesString to mailNotesList as string
                            set AppleScript's text item delimiters to {""}
                        else
                            set mailTitleString to mailTitle
                            set mailNotesString to mailNotes
                        end if

                        { mailTitleString, mailNotesString }

                    on error
                    
                        try
                            return { "", "" }
                        on error
                        end try
                        
                    end try

                end tell
        ]]></string>
	</dict>
	<key>com.readdle.smartemail-mac</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            set mailTitle to ""
            set mailNotes to ""
            tell application id "com.readdle.smartemail-Mac"
                if HasSelectedMessage then
                    set mailUrl to GetSelectedMessageBacklink
                    set mailSubject to GetSelectedMessageTitle
                    set mailTitle to mailSubject
                    set mailNotes to mailUrl
                end if
            end tell
            { mailTitle, mailNotes }
        ]]></string>
	</dict>
	<key>com.readdle.beta.Spark-Mac</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            set mailTitle to ""
            set mailNotes to ""
            tell application id "com.readdle.beta.Spark-Mac"
                if HasSelectedMessage then
                    set mailUrl to GetSelectedMessageBacklink
                    set mailSubject to GetSelectedMessageTitle
                    set mailTitle to mailSubject
                    set mailNotes to mailUrl
                end if
            end tell
            { mailTitle, mailNotes }
        ]]></string>
	</dict>
	<key>com.mailplaneapp.mailplane</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            set mailTitle to ""
            set mailNotes to ""
            tell application "Mailplane"
                set mailTitle to currentTitle
                set mailNotes to currentURL
            end tell
            { mailTitle, mailNotes }
        ]]></string>
	</dict>
	<key>com.mailplaneapp.mailplane3</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            set mailTitle to ""
            set mailNotes to ""
            tell application id "com.mailplaneapp.mailplane3"
                set mailTitle to currentTitle
                set mailNotes to currentURL
            end tell
            { mailTitle, mailNotes }
        ]]></string>
	</dict>
    <key>com.c-command.eaglefiler</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.c-command.eaglefiler"
                tell current library document
                    tell browser window 1
                        set sr to selected records
                        if (count of sr) > 0 then
                            set recordItems to {}
                            repeat with r in sr
                                set recordTitle to title of r
                                set recordURL to URL of r
                                set recordItem to recordTitle & "\n" & recordURL
                                set recordItems to recordItems & recordItem
                            end repeat
                            set AppleScript's text item delimiters to {"\n" & "\n"}
                            set recordItemsDescription to recordItems as string
                            if (count of sr) > 1 then
                                {"", recordItemsDescription}
                            else
                                {recordTitle, recordItemsDescription}
                            end if
                        else
                            {"", ""}
                        end if
                    end tell
                end tell
            end tell
        ]]></string>
    </dict>
	<key>com.apple.finder</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            tell application "Finder"
                
                set selectionList to {} & selection as list
                set selectedCount to count items in selectionList
                
                set fileURLs to {} as list
                
                if selectedCount > 0 then
                    
                    repeat with fileItem in selectionList

                        if class of fileItem is folder then
                            set prefix to "📁 "
                        else
                            set prefix to "📄 "
                        end if

                        set fileName to name of fileItem
                        set filePath to fileItem as text
                        
                        set posixFilePath to POSIX path of filePath

                        set fileURL to prefix & fileName & "\n" & "[filepath=" & posixFilePath & "]" & fileName & "[/filepath]"
                        
                        set fileURLs to fileURLs & fileURL
                        
                    end repeat
                    
                    set AppleScript's text item delimiters to {"\n" & "\n"}
                    set fileURL to fileURLs as string
                    
                    {"", fileURL}
                    
                else
                    
                    {"", ""}
                    
                end if
                
            end tell
        ]]></string>
	</dict>
	<key>com.cocoatech.pathfinder</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            tell application "Path Finder"

                set selectionList to {} & selection as list
                set selectedCount to count items in selectionList
                
                set fileURLs to {} as list

                if selectedCount > 0 then

                    repeat with fileItem in selectionList
                        
                        set fileName to name of fileItem
                        set fileURL to URL of fileItem as text
                        
                        set formattedFileURL to "[url=" & fileURL & "]" & fileName & "[/url]"
                        
                        set fileURLs to fileURLs & formattedFileURL
                        
                    end repeat
                    
                    set AppleScript's text item delimiters to {""}
                    set fileURL to fileURLs as string
                    
                    {"", fileURL}

                else
                    {"", ""}
                end if
                
            end tell
        ]]></string>
	</dict>
	<key>com.binarynights.forklift</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
                set formattedFileUrl to ""
                
                tell application "System Events"
            
                    tell application process "ForkLift"
                        activate
                        set frontmost to true
                        tell menu bar 1
                            tell menu "Edit"
                                click menu item "Copy URL to Clipboard"
                            end tell
                        end tell
                    end tell
                    
                    delay 0.2
                    
                    set fileurl to the clipboard as text
                    
                    set AppleScript's text item delimiters to {"/"}
                    set filename to last text item of fileurl
                    set AppleScript's text item delimiters to {}
                    
                    set formattedFileUrl to "[urltoencode=" & fileurl & "]" & filename & "[/urltoencode]"
            
                end tell

                {"", formattedFileUrl}

        ]]></string>
	</dict>
	<key>com.ranchero.netnewswire-evergreen</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            tell application "NetNewsWire"

                set _title to the title of the current article
                set _url to the url of the current article

            end tell

            { _title, _title & "\n" & _url }
        ]]></string>
	</dict>
	<key>com.apple.textedit</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            set docurl to ""
            tell application "TextEdit"	

                set current_document to item 1 of documents

                try
                    set docname to name of current_document
                    set docpath to path of current_document
                on error
                    set docname to ""
                    set docpath to ""
                end try

            end tell
            
            try

                set posixFilePath to POSIX path of docpath
                set docurl to "[filepath=" & posixFilePath & "]" & docname & "[/filepath]"

                    
            on error
            end try

            {"", docurl}
            
        ]]></string>
	</dict>
	<key>com.barebones.textwrangler</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
            tell application "TextWrangler"	

                set current_document to first document

                try
                    set docname to name of current_document
                    set docfile to file of current_document
                on error
                    set docname to ""
                    set docfile to missing value
                end try


            end tell
            
            try

                set posixFilePath to POSIX path of docfile
                set docurl to "[filepath=" & posixFilePath & "]" & docname & "[/filepath]"
                                    
            on error
            end try

            {"", docurl}
            
        ]]></string>
	</dict>
	<key>com.apple.iwork.pages</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
            set docurl to ""
        
            tell application "Pages"
	
                set current_document to item 1 of documents

                try
                    set docname to name of current_document
                    set docpath to path of current_document
                on error
                    set docname to ""
                    set docpath to ""
                end try

            end tell
            
            try
                
                set posixFilePath to POSIX path of docpath

                set docurl to "[filepath=" & posixFilePath & "]" & docname & "[/filepath]"
                                            
            on error
            end try

            {"", docurl}
            
        ]]></string>
	</dict>
	<key>com.microsoft.word</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
            set resultNote to ""

            set current_text to ""

            tell application "Microsoft Word"
                
                
                try
                    set current_name to name of active document
                    
                    set current_selectionStart to selection start of selection
                    set current_selectionEnd to selection end of selection
                    if current_selectionStart is not current_selectionEnd then
                        set current_text to content of selection
                    end if
                    
                    set p to path of active document
                    set posixFullPath to POSIX path of p
                    
                on error
                    set posixFullPath to ""
                end try
                
            end tell

            try
                POSIX file posixFullPath as alias
                set resultNote to "[filepath=" & posixFullPath & "]" & current_name & "[/filepath]"
                if current_text is not "" then
                    set resultNote to resultNote & "\n" & "\n" & current_text
                end if
            on error
                set resultNote to current_text
            end try

            {"", resultNote}
            
        ]]></string>
	</dict>
	<key>com.microsoft.entourage</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
            tell application "Microsoft Entourage"

                if class of window 1 is message window then
                    try
                        set displayedMsg to displayed message of window 1
                        set msgList to {displayedMsg}
                    on error
                        set msgList to {}
                    end try
                else
                    set msgList to the selection
                    if msgList is "" then
                        set msgList to {}
                    end if
                end if
                
                set mailIdentity to the name of current identity
                set userPath to path to home folder
                set pathtoMD to ((userPath as string) & "Library:Caches:Metadata:Microsoft:Entourage:2008:")
                set fileExtension to ".vRge08Message"
            end tell

            set resultNote to ""
            
            repeat with eachMsg in msgList

                set msgID to the id of eachMsg
                -- parse the msgID
                set msgT to my getMsgLevel(msgID, "T")
                set msgB to my getMsgLevel(msgID, "B")
                set msgM to my getMsgLevel(msgID, "M")
                set msgK to my getMsgLevel(msgID, "K")
                
                --set up the file and full path
                set fileName to msgID & fileExtension
                set pathToFile to pathtoMD & mailIdentity & ":Messages:" & msgT & msgB & msgM & msgK & fileName
                
                tell application "Finder"
                    if file pathToFile exists then
                        
                        set posixFullPath to POSIX path of file pathToFile
                        
                    end if
                end tell
                
                tell application "Microsoft Entourage"
                    set msgTitle to the display name of sender of eachMsg & ": \"" & subject of eachMsg & "\""
                end tell
                
                set resultNote to resultNote & "[urltoencode=file://" & posixFullPath & "]" & msgTitle & "[/urltoencode]" & "\n"

            end repeat

            on getMsgLevel(msgID, level)
                msgID as real
                -- switch on level
                if level is "T" then
                    set msgN to msgID / 1.0E+12
                else if level is "B" then
                    set msgN to msgID / 1.0E+10
                else if level is "M" then
                    set msgN to msgID / 1.0E+7
                else if level is "K" then
                    set msgN to msgID / 1000
                end if
                set the_string to my findNumberString(msgN, level)
                return the_string
            end getMsgLevel

            on findNumberString(msgNum, level)
                set msgInt to (round msgNum rounding toward zero)
                if msgInt is 0 then
                    set the_string to "0" & level & ":"
                else
                    set the_string to (msgInt as string) & level & ":"
                end if
                return the_string
            end findNumberString

            {"", resultNote}
            
        ]]></string>
	</dict>
	<key>net.sourceforge.skim-app.skim</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
            tell application "Skim"
	
                set doc to document 1
                                
                set docname to name of doc
                set docfile to file of doc

                set posixFilePath to POSIX path of docfile
                set docurl to "[filepath=" & posixFilePath & "]" & docname & "[/filepath]"
                                
            end tell
            
            {"", docurl}
            
        ]]></string>
	</dict>
    <key>com.reinvented.keepit</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.reinvented.KeepIt"
                
                set selectedItems to selected items
                
                set itemLinks to {} as list
                repeat with anItem in selectedItems
                    set itemTitle to name of anItem
                    set itemLink to itemTitle & "\n" & (link of anItem)
                    set itemLinks to itemLinks & itemLink
                end repeat
                if (count of selected items) > 1 then
                    set itemTitle to ""
                    set AppleScript's text item delimiters to {"\n\n"}
                    set itemLinkString to itemLinks as string
                else
                    set itemLinkString to itemLink
                end if
                
                {itemTitle, itemLinkString}
                
            end tell
        ]]></string>
    </dict>
    <key>com.momenta.agenda.macos</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[

            tell application id "com.momenta.agenda.macos"
                set sel to selection
                set itemTitle to (title of sel)
                set itemURL to (url of sel)
                set itemLink to itemTitle & "\n" & itemURL
            end tell

            {itemTitle, itemLink}

        ]]></string>
    </dict>
    <key>com.evernote.evernote</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.evernote.Evernote"
                set noteTitle to ""
                set noteLinkString to ""
                try
                    tell first window
                        set selectedNotes to selected notes
                        set noteLinks to {} as list
                        repeat with aNote in selectedNotes
                            set noteTitle to title of aNote
                            set noteLink to note link of aNote
                            set noteLinks to noteLinks & noteLink
                        end repeat
                        if (count of selected notes) > 1 then
                            set noteTitle to ""
                            set AppleScript's text item delimiters to {"\n"}
                            set noteLinkString to noteLinks as string
                        else
                            set noteLinkString to noteLink
                        end if
                    end tell
                end try
                {noteTitle, noteLinkString}
            end tell

        ]]></string>
    </dict>
	<key>com.barebones.yojimbo</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
        
            tell application "Yojimbo"
                
                try
                    
                    set urls to {} as list
                    
                    set selectedItems to selected items of window 1
                    
                    repeat with selectedItem in selectedItems
                        
                        if (class of selectedItem is note item) or (class of selectedItem is web archive item) or (class of selectedItem is serial number item) or (class of selectedItem is password item) or (class of selectedItem is pdf archive item) or (class of selectedItem is image item) or (class of selectedItem is bookmark item) then

                            set itemName to the name of selectedItem as Unicode text
                            set itemUrl to "x-yojimbo-item://" & the id of selectedItem
                            set formattedItemURL to "[url=" & itemUrl & "]" & itemName & "[/url]"
                            
                            set urls to urls & formattedItemURL

                        end if
                        
                    end repeat

                    if count of urls > 0 then
                    
                        set AppleScript's text item delimiters to {"  " & "\n"}
                        set itemUrl to urls as string
                        set AppleScript's text item delimiters to {""}
                    
                    else
                        set itemUrl to ""
                    end if
                    
                on error
                    set itemUrl to ""
                end try
                
            end tell
            
            {"", itemUrl}
        
        ]]></string>
	</dict>
	<key>com.phildow.journler</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            tell application "Journler"
                
                try
                    
                    set urls to {} as list

                    set the_notes to {}
                    set the_notes to selected entries of tib 1 of window 1

                    if the_notes is not equal to {} then
                        repeat with the_note in the_notes

                            set itemName to name of the_note
                            set itemUrl to uri representation of the_note
                            set formattedItemURL to "[url=" & itemUrl & "]" & itemName & "[/url]"

                            set urls to urls & formattedItemURL

                        end repeat
                    end if
                    
                    set AppleScript's text item delimiters to {"  " & "\n"}
                    set itemUrl to urls as string
                    set AppleScript's text item delimiters to {""}
                                        
                on error
                    set itemUrl to ""
                end try
                
            end tell
            
            {"", itemUrl}
        
        ]]></string>
	</dict>
    <key>com.hogbaysoftware.bike</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.hogbaysoftware.Bike"
                tell document 1
                    set r to selection row
                    set theUrl to URL of r
                    set theTitle to name of r
                    set theNotes to theTitle & return & theUrl
                end tell
            end tell
            {theTitle, theNotes}
        ]]></string>
    </dict>
	<key>com.devon-technologies.thinkpro2</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[
            tell application "DEVONthink Pro"

                set notesTitle to ""
                set notesListString to ""

                try
                    
                    set notesList to {} as list
                    
                    if (exists think window 1) then
                        
                        set selectedItems to selection
                        
                        repeat with selectedItem in selectedItems                            
                            set itemTitle to name of selectedItem
                            set itemUUID to uuid of selectedItem
                            set AppleScript's text item delimiters to {"<"}
                            set itemUUIDComponents to text items of itemUUID
                            set AppleScript's text item delimiters to {"%3C"}
                            set itemUUID to itemUUIDComponents as text
                            set AppleScript's text item delimiters to {">"}
                            set itemUUIDComponents to text items of itemUUID
                            set AppleScript's text item delimiters to {"%3E"}
                            set itemUUID to itemUUIDComponents as text
                            set itemURL to "x-devonthink-item://" & itemUUID
                            set itemNotes to itemTitle & "\n" & itemURL
                            set notesList to notesList & itemNotes
                        end repeat
                        
                    end if
                    
                    if (count of notesList) > 1 then
                        set AppleScript's text item delimiters to {"  " & "\n" & "\n"}
                        set notesListString to notesList as string
                        set AppleScript's text item delimiters to {""}
                    else
                        set notesTitle to itemTitle
                        set notesListString to itemNotes
                    end if
                    
                on error
                end try
                
            end tell

            {notesTitle, notesListString}

        ]]></string>
	</dict>
    <key>com.devon-technologies.think3</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[

            tell application id "com.devon-technologies.think3"

                set notesTitle to ""
                set notesListString to ""

                set notesList to {} as list

                try

                    if (exists think window 1) then

                        set currentTab to current tab of think window 1

                        try
                            set currentTabRecord to content record of currentTab
                        on error
                            set currentTab to missing value
                            set currentTabRecord to missing value
                        end try

                        set operateOnSelection to false

                        if currentTab is not missing value then

                            if currentTabRecord is not missing value then
                                set itemTitle to name of currentTabRecord

                                set itemURL to missing value
                                set itemParent to first parent of currentTabRecord
                                if itemParent is not missing value then
                                    if type of itemParent is feed then
                                        set itemURL to URL of currentTabRecord
                                    end if
                                end if
                                if itemURL is missing value then
                                    set itemUUID to uuid of currentTabRecord
                                    set AppleScript's text item delimiters to {"<"}
                                    set itemUUIDComponents to text items of itemUUID
                                    set AppleScript's text item delimiters to {"%3C"}
                                    set itemUUID to itemUUIDComponents as text
                                    set AppleScript's text item delimiters to {">"}
                                    set itemUUIDComponents to text items of itemUUID
                                    set AppleScript's text item delimiters to {"%3E"}
                                    set itemUUID to itemUUIDComponents as text
                                    set itemURL to "x-devonthink-item://" & itemUUID
                                end if

                                set itemNotes to itemTitle & "\n" & itemURL
                                set notesList to notesList & itemNotes


                            else

                                set currentTabURL to URL of currentTab

                                if currentTabURL is not "" then

                                    -- Operate on URL

                                    set itemTitle to currentTabURL
                                    try
                                        set currentTabSource to source of currentTab
                                        set itemTitle to (get title of currentTabSource)
                                    end try

                                    set itemNotes to currentTabURL

                                    set notesList to notesList & itemNotes

                                else
                                    set operateOnSelection to true
                                end if

                            end if

                        end if

                        if operateOnSelection then

                            -- Operate on selection if needed

                            set selectedItems to selection

                            repeat with selectedItem in selectedItems

                                set itemTitle to name of selectedItem

                                set itemURL to missing value
                                set itemParent to first parent of selectedItem
                                if itemParent is not missing value then
                                    if type of itemParent is feed then
                                        set itemURL to URL of selectedItem
                                    end if
                                end if
                                if itemURL is missing value then

                                    set itemUUID to uuid of selectedItem
                                    set AppleScript's text item delimiters to {"<"}
                                    set itemUUIDComponents to text items of itemUUID
                                    set AppleScript's text item delimiters to {"%3C"}
                                    set itemUUID to itemUUIDComponents as text
                                    set AppleScript's text item delimiters to {">"}
                                    set itemUUIDComponents to text items of itemUUID
                                    set AppleScript's text item delimiters to {"%3E"}
                                    set itemUUID to itemUUIDComponents as text
                                    set itemURL to "x-devonthink-item://" & itemUUID
                                end if

                                set itemNotes to itemTitle & "\n" & itemURL
                                set notesList to notesList & itemNotes

                            end repeat

                        end if


                    end if

                    if (count of notesList) > 1 then
                        set AppleScript's text item delimiters to {"  " & "\n" & "\n"}
                        set notesListString to notesList as string
                        set AppleScript's text item delimiters to {""}
                    else
                        set notesTitle to itemTitle
                        set notesListString to itemNotes
                    end if

                end try

            end tell

            {notesTitle, notesListString}

        ]]></string>
    </dict>
    <key>com.devon-technologies.agent</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application id "com.devon-technologies.agent"

                set searchResults to missing value
                set firstWindow to window 1

                if class of firstWindow is search window then
                    set searchResults to selection of firstWindow
                else if class of firstWindow is browser then
                    try
                        set currentResult to current result of firstWindow
                        set searchResults to {currentResult}
                    on error
                        return {"", ""}
                    end try
                end if

                if searchResults is not missing value then
                    log searchResults
                    if (count of searchResults) > 0 then

                        set itemLinks to {} as list
                        repeat with searchResult in searchResults
                            set itemTitle to title of searchResult
                            set itemLink to itemTitle & "\n" & (URL of searchResult)
                            set itemLinks to itemLinks & itemLink
                        end repeat
                        if (count of searchResults) > 1 then
                            set itemTitle to ""
                            set AppleScript's text item delimiters to {"\n\n"}
                            set itemLinkString to itemLinks as string
                        else
                            set itemLinkString to itemLink
                        end if

                        return {itemTitle, itemLinkString}

                    else
                        return {"", ""}
                    end if
                else
                    return {"", ""}
                end if

            end tell
        ]]></string>
    </dict>
    <key>com.houdah.houdahspot4</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[

            tell application id "com.houdah.HoudahSpot4"

                tell document 1
                    set selectionList to selection
                    set selectedCount to count items in selectionList

                    set fileURLs to {} as list

                    if selectedCount > 0 then

                        repeat with fileItem in selectionList

                            set fileName to name of fileItem
                            set filePath to path of fileItem

                            set prefix to "📄 "

                            set fileURL to prefix & fileName & "\n" & "[filepath=" & filePath & "]" & fileName & "[/filepath]"

                            set fileURLs to fileURLs & fileURL

                        end repeat

                        set AppleScript's text item delimiters to {"\n" & "\n"}
                        set fileURL to fileURLs as string

                        {"", fileURL}

                    else

                        {"", ""}

                    end if


                end tell

            end tell

        ]]></string>
    </dict>
    <key>com.apple.addressbook</key>
	<dict>
		<key>AppleScript</key>
		<string><![CDATA[

            try
                tell application "Address Book"

                    set contactNotesList to {} as list
                    set cards to selection

                    repeat with card in cards
                        set contactName to name of card
                        set contactUrl to "addressbook://" & id of card
                        set contactNotes to contactName & "\n" & contactUrl
                        set contactNotesList to contactNotesList & contactNotes
                    end repeat

                    if count of contactNotesList > 1 then
                        set AppleScript's text item delimiters to {"  " & "\n" & "\n"}
                        set contactNotesString to contactNotesList as string
                        set AppleScript's text item delimiters to {""}
                        set contactName to (((count of contactNotesList) & " contacts") as text)
                    else
                        set contactNotesString to contactNotes
                    end if

                    { contactName, contactNotesString }

                end tell
            on error
                return { "", "" }
            end try

        ]]></string>
	</dict>
    <key>com.stairways.keyboardmaestro.editor</key>
    <dict>
        <key>AppleScript</key>
        <string><![CDATA[

            tell application id "com.stairways.keyboardmaestro.editor"

                set _notesList to {} as list
                set _selectedMacros to selected macros

                if (count of _selectedMacros) > 0 then

                    repeat with _macro in _selectedMacros
                        set _name to name of _macro
                        set _url to "keyboardmaestro://m=" & id of _macro
                        set _notes to _name & "\n" & _url
                        set _notesList to _notesList & _notes
                    end repeat

                else

                    set _selectedMacroGroups to selected macro groups
                    if (count of _selectedMacroGroups) > 0 then

                        repeat with _macro in _selectedMacroGroups
                            set _name to name of _macro
                            set _url to "keyboardmaestro://m=" & id of _macro
                            set _notes to _name & "\n" & _url
                            set _notesList to _notesList & _notes
                        end repeat

                    else
                        return {"", ""}
                    end if

                end if


                if (count of _notesList) > 1 then
                    set AppleScript's text item delimiters to {"  " & "\n" & "\n"}
                    set _notesString to _notesList as text
                    set AppleScript's text item delimiters to {""}
                    set _name to ""
                else
                    set _notesString to _notesList
                end if

                return {_name, _notesString}

            end tell

        ]]></string>
    </dict>
    <key>com.missiveapp.osx</key>
    <dict>
        <key>URL</key>
        <string>missive://getCurrentConversation?x-success=thingshelper%3A%2F%2Fquickentry</string>
        <key>CallbackHandler</key>
        <string><![CDATA[
            on handle_callback(response)
                if title of response is "" then
                    return {title of response, |url| of response}
                else
                    return {title of response, title of response & "\n" & |url| of response}
                end if
            end handle_response
        ]]></string>
    </dict>
    <key>md.obsidian</key>
    <dict>
        <key>URL</key>
        <string>obsidian://hook-get-address?x-success=thingshelper%3A%2F%2Fquickentry</string>
        <key>CallbackHandler</key>
        <string><![CDATA[
            on handle_callback(response)
                if |name| of response is "" then
                    return {|name| of response, |url| of response}
                else
                    return {|name| of response, |name| of response & "\n" & |url| of response}
                end if
            end handle_response
        ]]></string>
    </dict>
    <key>com.agiletortoise.drafts-osx</key>
    <dict>
        <key>URL</key>
        <string>drafts://x-callback-url/getCurrentDraft?x-success=thingshelper%3A%2F%2Fquickentry</string>
        <key>CallbackHandler</key>
        <string><![CDATA[
            on handle_callback(response)
                if title of response is "" then
                    return {title of response, |url| of response}
                else
                    return {title of response, title of response & "\n" & |url| of response}
                end if
            end handle_response
        ]]></string>
    </dict>
    <key>net.shinyfrog.bear</key>
    <dict>
        <key>IsExperimental</key>
        <true/>
        <key>AppleScript</key>
        <string><![CDATA[
            tell application "Bear" to activate
            delay 0.25
            tell application "System Events"
                tell application process "net.shinyfrog.bear"
                    keystroke "L" using {command down, option down}
                end tell
            end tell
            delay 0.5
            { "", the clipboard }
        ]]></string>
    </dict>
</dict>
</plist>
